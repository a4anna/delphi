# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from delphi.proto import learning_module_pb2 as proto_dot_learning__module__pb2


class LearningModuleServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Infer = channel.stream_stream(
                '/LearningModuleService/Infer',
                request_serializer=proto_dot_learning__module__pb2.InferRequest.SerializeToString,
                response_deserializer=proto_dot_learning__module__pb2.InferResult.FromString,
                )
        self.AddLabeledExamples = channel.stream_unary(
                '/LearningModuleService/AddLabeledExamples',
                request_serializer=proto_dot_learning__module__pb2.LabeledExample.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetModelStatistics = channel.unary_unary(
                '/LearningModuleService/GetModelStatistics',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_learning__module__pb2.ModelStatistics.FromString,
                )
        self.ImportModel = channel.unary_unary(
                '/LearningModuleService/ImportModel',
                request_serializer=proto_dot_learning__module__pb2.ImportModelRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ExportModel = channel.unary_unary(
                '/LearningModuleService/ExportModel',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_learning__module__pb2.ModelArchive.FromString,
                )


class LearningModuleServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Infer(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddLabeledExamples(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelStatistics(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportModel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportModel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LearningModuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Infer': grpc.stream_stream_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=proto_dot_learning__module__pb2.InferRequest.FromString,
                    response_serializer=proto_dot_learning__module__pb2.InferResult.SerializeToString,
            ),
            'AddLabeledExamples': grpc.stream_unary_rpc_method_handler(
                    servicer.AddLabeledExamples,
                    request_deserializer=proto_dot_learning__module__pb2.LabeledExample.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetModelStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelStatistics,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_learning__module__pb2.ModelStatistics.SerializeToString,
            ),
            'ImportModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportModel,
                    request_deserializer=proto_dot_learning__module__pb2.ImportModelRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ExportModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportModel,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_learning__module__pb2.ModelArchive.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LearningModuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LearningModuleService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Infer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/LearningModuleService/Infer',
            proto_dot_learning__module__pb2.InferRequest.SerializeToString,
            proto_dot_learning__module__pb2.InferResult.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddLabeledExamples(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/LearningModuleService/AddLabeledExamples',
            proto_dot_learning__module__pb2.LabeledExample.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningModuleService/GetModelStatistics',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_learning__module__pb2.ModelStatistics.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningModuleService/ImportModel',
            proto_dot_learning__module__pb2.ImportModelRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LearningModuleService/ExportModel',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_learning__module__pb2.ModelArchive.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
